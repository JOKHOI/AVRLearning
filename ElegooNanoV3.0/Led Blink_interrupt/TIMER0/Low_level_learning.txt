#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#define F_CPU 16000000 // 16 MHz
//The following shows go to use the AVR Timer interrupt to create a PMW signal and flip and LED every second

ISER (TIMER1_OVF_vect)
{
    PORTD ^= _BV(PORTD2);
    //reinitialize the counter each second   MAX value-(F_CPU/1024)
    TCNT1 = 65535 - (F_CPU/1024);

}

int main(void)
{   //set PORT D2 as an output
    DDRD |=  _BV(DDD2);
    //TCNT1 = Timer/Counter1 is initialized to 0
    //TCNT1 will count up to 65535 and trigger an overflow interrupt and trigger the ISR
    TCNT1 = 65535 - (F_CPU/1024);

//Counter speed
    //set timer 0 prescaler to 1024
    //16Mhz/1024 = 15625hz -> this is a sec0nd
    TCCR1B = TCCR1B | (1<<CS10) | (1<<CS12);
    
//enable overflow interrupt
    //DISABLE ALL OTHER FEATURE
    //TCCR1A = Timer/Counter1 Control Register A
    TCCR1A = 0X00;

    //OVERFLOW INTERRUPT ENABLE
    //TIMSK1 = Timer Interrupt Mask Register
    //TOIE1 = Timer/Counter1, Overflow Interrupt Enable
    TIMSK1 = (1<<TOIE1);

    //sei() = set enable interrupt
    //function to enable the global interrupt flag because the global interrupt flag is disabled by default
    sei();

    //loop*(forever)
    while(1)
        {
            ;;

        }
}   